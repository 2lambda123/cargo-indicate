# This is not truly a GraphQL file; Instead it is a GraphQL representation of the
# types provided by indicator.

# _This is the single source of truth for `indicator`. Any deviation from it is to
# be considered a bug._

# This is the currently supported Trustfall directives. They are handled by the
# Trustfall engine.
schema {
    query: RootQuery
}
directive @filter(
    """Name of the filter operation to perform."""
    op: String!
    """List of string operands for the operator."""
    value: [String!]
) on FIELD | INLINE_FRAGMENT
directive @tag(
    """Name to apply to the given property field."""
    name: String
) on FIELD
directive @output(
    """What to designate the output field generated from this property field."""
    name: String
) on FIELD
directive @optional on FIELD
directive @recurse(
    """
    Recurse up to this many times on this edge. A depth of 1 produces the current
    vertex and its immediate neighbors along the given edge.
    """
    depth: Int!
) on FIELD
directive @fold on FIELD
directive @transform(
    """
    Name of the transformation operation to perform.
    """
    op: String!
) on FIELD

"""
This is the actual types that can be used to create queries.

Note that each GraphQL type corresponds to one `Token` variant (see `token.rs`)
"""

type RootQuery {
    RootPackage: Package!
}

# See `cargo_metadata::Package`
type Package {
    id: ID!,
    name: String!,
    version: String!,
    repository: Webpage
    dependencies: [Package!]!
    advisoryHistory(affected: Affected): [Advisory!]!
}

interface Webpage {
    url: String!
}

interface Repository implements Webpage {
    url: String!
}

type GitHubRepository implements Repository & Webpage {
    # From Repository and Webpage
    url: String!

    owner: GitHubUser
    name: String!
    
    starsCount: Int!
    forksCount: Int!
    openIssuesCount: Int!
    
    # If the issues page is available for this repository
    hasIssues: Boolean!
    archived: Boolean!
    
    # If this is a fork
    fork: Boolean!
}

type GitHubUser {
    username: String!
    email: String!
    unixCreatedAt: Int
    followersCount: Int!
}

# `rustsec::advisory::Advisory`
type Advisory {
    metadata: AdvisoryMetadata!
    affected: [Affected!]!
    versions: [String!]!
}

# `rustsec::advisory::Metadata`
type AdvisoryMetadata {
    id: ID!
    title: String!
    description: String!
    unixDateReported: Int!
    
    # If it was reported in error, this will indicate when it was withdrawn
    unixDateWithdrawn: Int
    cvss: CvssBase
}

# `rustsec::advisory::Affected`
type Affected {
    arch: [String!]!
    os: [String!]!
    functions: [AffectedFunctionVersions!]!
}

type AffectedFunctionVersions {
    function_path: String!
    versions: [String!]!
}

# `cvss::v3::base::Base`
type CvssBase {
    minorVersion: Int!
    attackVector: attackVector
    attackComplexity: AttackComplexity
    privilegesRequired: PrivilegesRequired
    userInteraction: UserInteraction
    scope: Scope
    confidentiality: Confidentiality
    integrity: Integrity
    availability: Availability
}

# `cvss::v3::base::AttackVector`
enum AttackVector {
    PHYSICAL
    LOCAL
    ADJACENT
    NETWORK
}

# `cvss::v3::base::AttackComplexity`
enum AttackComplexity {
    HIGH
    LOW
}

# `cvss::v3::base::PrivilegesRequired`
enum PrivilegesRequired {
    HIGH
    LOW
    NONE
}

# `cvss::v3::base::UserInteraction`
enum UserInteraction {
    REQUIRED
    NONE
}

# `cvss::v3::base::Scope`
enum Scope {
    UNCHANGED
    CHANGED
}

# `cvss::v3::base::Confidentiality`
enum Confidentiality {
    NONE
    LOW
    HIGH
}

# `cvss::v3::base::Integrity`
enum Integrity {
    NONE
    LOW
    HIGH
}

# `cvss::v3::base::Availability`
enum Availability {
    NONE
    LOW
    HIGH
}